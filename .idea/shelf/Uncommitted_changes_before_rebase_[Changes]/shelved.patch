Index: src/UMGCWesternBlotEditor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\nimport java.util.*;\nimport java.util.List;\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport org.im4java.core.ConvertCmd;\nimport org.im4java.core.IMOperation;\nimport org.im4java.core.IM4JavaException;\npublic class UMGCWesternBlotEditor extends JFrame implements ActionListener {\n    private final JButton buttonResize;\n    private final JButton buttonEdge;\n    private final JButton buttonMonochrome;\n    private final JButton buttonInvert;\n    private final JButton buttonBrightnessContrast;\n    private final JButton buttonSC;\n    private final JButton buttonReset;\n    private final JButton buttonLastImage;\n    private final JButton exportHistory;\n    private final JMenuItem fileOpen;\n    private final JMenuItem fileSaveAs;\n    private final JMenuItem editReset;\n    private final JMenuItem toolsEdge;\n    private final JMenuItem toolsBC;\n    private final JMenuItem toolsSC;\n    private final JMenuItem toolsResize;\n    private final JMenuItem toolsMonochrome;\n    private final JMenuItem toolsInvert;\n    private final JMenuItem historyShowHistory;\n    private JScrollPane imageScrollPane;\n    private final Container l_c;\n    private String imagePath;\n    private String originalImage;\n    private String lastImage;\n    private int opCount = 0;\n    List<String> historyList = new ArrayList<>(\n            List.of());\n    private String extension;\n\n    public UMGCWesternBlotEditor() throws IOException {\n        super(\"UMGC Western Blot Editor\");\n        // Create Graphical Interface\n        // Buttons and Listeners\n        buttonResize = new JButton(\"Resize\");\n        buttonResize.addActionListener(this);\n        buttonInvert = new JButton(\"Invert\");\n        buttonInvert.addActionListener(this);\n        buttonEdge = new JButton(\"Edge\");\n        buttonEdge.addActionListener(this);\n        buttonMonochrome = new JButton(\"Monochrome\");\n        buttonMonochrome.addActionListener(this);\n        buttonBrightnessContrast = new JButton(\"Bright/Contrast\");\n        buttonBrightnessContrast.addActionListener(this);\n        buttonSC = new JButton(\"Sigmoidal Contrast\");\n        buttonSC.addActionListener(this);\n        buttonReset = new JButton(\"Reset\");\n        buttonReset.addActionListener(this);\n        buttonLastImage = new JButton(\"Get Last Image\");\n        buttonLastImage.addActionListener(this);\n        // Create menu items\n        fileOpen = new JMenuItem(\"Open\");\n        fileOpen.addActionListener(this);\n        fileSaveAs = new JMenuItem(\"Save As\");\n        fileSaveAs.addActionListener(this);\n        editReset = new JMenuItem(\"Reset\");\n        editReset.addActionListener(this);\n        toolsEdge = new JMenuItem(\"Edge\");\n        toolsEdge.addActionListener(this);\n        toolsBC = new JMenuItem(\"Brightness/Contrast\");\n        toolsBC.addActionListener(this);\n        toolsSC = new JMenuItem(\"Sigmoidal Contrast\");\n        toolsSC.addActionListener(this);\n        toolsResize = new JMenuItem(\"Resize\");\n        toolsResize.addActionListener(this);\n        toolsMonochrome = new JMenuItem(\"Monochrome\");\n        toolsMonochrome.addActionListener(this);\n        toolsInvert = new JMenuItem(\"Invert\");\n        toolsInvert.addActionListener(this);\n        historyShowHistory = new JMenuItem(\"Show History\");\n        historyShowHistory.addActionListener(this);\n        exportHistory = new JButton(\"Export History\");\n        exportHistory.addActionListener(this);\n        // Create Menu and Add Menu Items\n        JMenu file = new JMenu(\"File\");\n        file.setMnemonic('F'); // Alt -F will access files\n\n\n        JMenu edit = new JMenu(\"Edit\");\n        edit.setMnemonic('E'); // Alt -E will access Edits\n\n        JMenu tools = new JMenu(\"Tools\");\n        tools.setMnemonic('T'); // Alt -T will access Tools\n\n        JMenu history = new JMenu(\"History\");\n        history.setMnemonic('H'); // Alt -H will access History\n        history.add(historyShowHistory);\n\n        // will need a help button not shown on menu bar just yet-- need to finalize program//\n        JMenu help = new JMenu(\"Help\");\n        help.setMnemonic('P'); // Alt -P will access Help\n\n        // quick key strokes -- open\n        file.add(fileOpen);\n        fileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));\n\n        // quick key strokes -- Save As\n        file.add(fileSaveAs);\n        fileSaveAs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_MASK));\n\n        // quick key strokes -- Reset Image\n        edit.add(editReset);\n        editReset.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_MASK));\n\n        tools.add(new JLabel(\"Detect Lines\"));\n        tools.add(toolsEdge);\n        tools.add(new JSeparator());\n        tools.add(new JLabel(\"Transform\"));\n        tools.add(toolsResize);\n        tools.add(new JSeparator());\n        tools.add(new JLabel(\"Image Color\"));\n        tools.add(toolsBC);\n        tools.add(toolsSC);\n        tools.add(toolsMonochrome);\n        tools.add(toolsInvert);\n        // Create Menu Bar\n        JMenuBar mb = new JMenuBar();\n        mb.add(file);\n        mb.add(edit);\n        mb.add(tools);\n        mb.add(history);\n        // Add Top Menu Bar\n        JPanel menuBar = new JPanel();\n        menuBar.setLayout(new BorderLayout());\n        menuBar.add(mb);\n        // Add Buttons\n        JPanel panelButtonDL = new JPanel();\n        panelButtonDL.add(new JLabel(\"Detect Lines\"));\n        panelButtonDL.add(new JSeparator());\n        panelButtonDL.add(buttonEdge);\n        JPanel panelButtonTransform = new JPanel();\n        panelButtonTransform.add(new JLabel(\"Transform\"));\n        panelButtonTransform.add(new JSeparator());\n        panelButtonTransform.add(buttonResize);\n        JPanel panelButtonColor = new JPanel();\n        panelButtonColor.add(new JLabel(\"Color\"));\n        panelButtonColor.add(new JSeparator());\n        panelButtonColor.add(buttonMonochrome);\n        panelButtonColor.add(buttonBrightnessContrast);\n        panelButtonColor.add(buttonSC);\n        panelButtonColor.add(buttonInvert);\n        panelButtonColor.add(buttonLastImage);\n        panelButtonColor.add(buttonReset);\n\n        // Load Initial Image ** FIND A BETTER WAY TO DO THIS!! ***\n        JFileChooser chooser = new JFileChooser();\n        FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                \"JPG, TIFF, PNG, HEIC Images\", \"jpg\", \"tiff\", \"png\", \"heic\");\n        chooser.setFileFilter(filter);\n        JTextField textFieldImagePath = new JTextField(100);\n        int returnVal = chooser.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            textFieldImagePath.setText(chooser.getSelectedFile().getAbsolutePath());\n        }\n        imagePath = textFieldImagePath.getText();\n        if (imagePath.contains(\".jpg\"))\n            extension = \".jpg\";\n        else if (imagePath.contains(\".tiff\"))\n            extension = \".tiff\";\n        else if (imagePath.contains(\".png\"))\n            extension = \".png\";\n        else if (imagePath.contains(\".heic\"))\n            extension = \".heic\";\n        originalImage = imagePath;\n        File imgFile = new File(textFieldImagePath.getText());\n        BufferedImage img = ImageIO.read(imgFile);\n        ImageIcon icon = new ImageIcon(img);\n        JLabel image = new JLabel(icon);\n        imageScrollPane = new JScrollPane(image);\n        buttonLastImage.setEnabled(false);\n\n        // Load Content Pane and add components\n        l_c = getContentPane();\n        l_c.setLayout(new BorderLayout());\n        l_c.add(menuBar, BorderLayout.NORTH);\n        l_c.add(panelButtonColor, BorderLayout.SOUTH);\n        l_c.add(panelButtonDL, BorderLayout.EAST);\n        l_c.add(panelButtonTransform, BorderLayout.WEST);\n        l_c.add(imageScrollPane, BorderLayout.CENTER);\n        pack();\n        setVisible(true);\n    }\n\n    public static void main(String[] args) throws IOException {\n        UMGCWesternBlotEditor t = new UMGCWesternBlotEditor();\n        t.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // Process builder takes values set by user and passes them to the shell script\n\n        // create process\n        ProcessBuilder pb = new ProcessBuilder();\n        // location of shell script to be executed\n        pb.directory(new File(\"/Users/pfspooter/Desktop/Shell_Test/pb_test/\"));\n        // commands to be run, first invoke the program to run, then the commands to be executed with any arguments\n\n        /* can also build a list of commands\n        // creating list of commands\n        List<String> commands = new ArrayList<String>();\n        commands.add(\"ls\"); // command\n        commands.add(\"-l\"); // command\n        */\n\n        pb.command(\"bash\", \"copy.sh\");\n        // start process\n        try {\n            Process process = pb.start();\n            // checks if running shell command worked\n            int exitVal = process.waitFor();\n            if (exitVal == 0) {\n                System.out.println(\"\\nSuccess\");\n            } else {\n                System.out.println(\"\\nFail\");\n            }\n        }catch (IOException ex) {\n            ex.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // action listeners\n    public void actionPerformed(ActionEvent e) {\n        String newImage;\n        if (e.getSource() == fileOpen) {\n            JFileChooser chooser = new JFileChooser();\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                    \"JPG, TIFF, PNG, HEIC Images\", \"jpg\", \"tiff\", \"png\", \"heic\");\n            chooser.setFileFilter(filter);\n            JTextField textFieldImagePath = new JTextField(100);\n            int returnVal = chooser.showOpenDialog(null);\n            if (returnVal == JFileChooser.APPROVE_OPTION) {\n                textFieldImagePath.setText(chooser.getSelectedFile().getAbsolutePath());\n            }\n            imagePath = textFieldImagePath.getText();\n            if (imagePath.contains(\".jpg\"))\n                extension = \".jpg\";\n            else if (imagePath.contains(\".tiff\"))\n                extension = \".tiff\";\n            else if (imagePath.contains(\".png\"))\n                extension = \".png\";\n            else if (imagePath.contains(\".heic\"))\n                extension = \".heic\";\n            // Set original path to use with reset\n            originalImage = imagePath;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            historyList.clear();\n            l_c.revalidate();\n            buttonLastImage.setEnabled(false);\n        } else if (e.getSource() == fileSaveAs) {\n            JFileChooser fileChooser = new JFileChooser();\n            FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                    \"JPG, TIFF, PNG, HEIC Images\", \"jpg\", \"tiff\", \"png\", \"heic\");\n            fileChooser.setFileFilter(filter);\n            fileChooser.setDialogTitle(\"Specify a file to save\");\n            int userSelection = fileChooser.showSaveDialog(null);\n            if (userSelection == JFileChooser.APPROVE_OPTION) {\n                ConvertCmd cmd = new ConvertCmd();\n                IMOperation op = new IMOperation();\n                op.addImage(imagePath);\n                op.addImage(fileChooser.getSelectedFile().getAbsolutePath());\n                try {\n                    cmd.run(op);\n                } catch (IOException | InterruptedException | IM4JavaException ex) {\n                    throw new RuntimeException(ex);\n                }\n            }\n        } else if (e.getSource() == historyShowHistory) {\n            JTextArea textArea = new JTextArea();\n            JScrollPane textScrollPane = new JScrollPane(textArea);\n            textArea.setEditable(false);\n            for (int i = 0; i < historyList.size(); i++) {\n                textArea.append(i + 1 + \". \" + historyList.get(i) + \"\\n\");\n            }\n            JPanel historyPanel = new JPanel();\n            historyPanel.setLayout(new BorderLayout());\n            historyPanel.add(textScrollPane, BorderLayout.CENTER);\n            historyPanel.setSize(700, 500);\n            historyPanel.add(exportHistory, BorderLayout.SOUTH);\n            JFrame historyFrame = new JFrame();\n\n            historyFrame.add(historyPanel);\n            historyFrame.pack();\n            historyFrame.setVisible(true);\n            historyFrame.setTitle(\"Operations History\");\n\n        } else if (e.getSource() == buttonReset | e.getSource() == editReset) {\n            opCount = 0;\n            imagePath = originalImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            historyList.clear();\n            lastImage = null;\n            buttonLastImage.setEnabled(false);\n        } else if (e.getSource() == buttonEdge | e.getSource() == toolsEdge) {\n            opCount++;\n            JTextField thickness = new JTextField();\n            JPanel edgePanel = new JPanel();\n            edgePanel.setLayout(new GridLayout(2, 2));\n            edgePanel.add(new JLabel(\"Thickness: \"));\n            edgePanel.add(thickness);\n            JOptionPane.showConfirmDialog(null, edgePanel,\n                    \"Edge Thickness\", JOptionPane.OK_CANCEL_OPTION);\n            // ImageMagick Call\n            ConvertCmd cmd = new ConvertCmd();\n            // create the operation, add images and operators/options\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            op.edge(Double.parseDouble(thickness.getText()));\n            newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n            op.addImage(newImage);\n            // execute the operation\n            try {\n                cmd.run(op);\n            } catch (IOException | InterruptedException | IM4JavaException ex) {\n                throw new RuntimeException(ex);\n            }\n            historyList.add(\"edge: \" + thickness.getText());\n            lastImage = imagePath;\n            imagePath = newImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            buttonLastImage.setEnabled(true);\n        } else if (e.getSource() == buttonBrightnessContrast | e.getSource() == toolsBC) {\n            opCount++;\n            // Pop up window for brightness contrast params\n            //Change the JTextfield for brightness/contrast so that user can use slider to adjust value or type in the value.\n            JPanel bcPanel = new JPanel();\n            bcPanel.setLayout(new GridLayout(2, 1));\n            JOptionPane optionBPane = new JOptionPane();\n            JTextField brightness = new JTextField(3);\n            JSlider sliderB = new JSlider(-100, 100, 0);\n            sliderB.setMajorTickSpacing(25);\n            sliderB.setPaintTicks(true);\n            sliderB.setPaintLabels(true);\n            ChangeListener changeListener = changeEvent -> {\n                JSlider theSlider = (JSlider) changeEvent.getSource();\n                if (!theSlider.getValueIsAdjusting()) {\n                    brightness.setText(String.valueOf(theSlider.getValue()));\n                }\n            };\n            sliderB.addChangeListener(changeListener);\n            brightness.setEditable(false);\n            optionBPane.setMessage(new Object[]{\"Select a Brightness: \", brightness, sliderB});\n            JOptionPane optionCPane = new JOptionPane();\n            JTextField contrast = new JTextField(3);\n            JSlider sliderC = new JSlider(-100, 100, 0);\n            sliderC.setMajorTickSpacing(25);\n            sliderC.setPaintTicks(true);\n            sliderC.setPaintLabels(true);\n            ChangeListener changeListenerC = changeEvent -> {\n                JSlider theSliderC = (JSlider) changeEvent.getSource();\n                if (!theSliderC.getValueIsAdjusting()) {\n                    contrast.setText(String.valueOf(theSliderC.getValue()));\n                }\n            };\n            sliderC.addChangeListener(changeListenerC);\n            contrast.setEditable(false);\n            optionCPane.setMessage(new Object[]{\"Select a Contrast: \", contrast, sliderC});\n            bcPanel.add(optionBPane);\n            bcPanel.add(optionCPane);\n            JOptionPane.showConfirmDialog(null, bcPanel,\n                    \"Brightness / Contrast\", JOptionPane.OK_CANCEL_OPTION);\n            // ImageMagick Call\n            ConvertCmd cmd = new ConvertCmd();\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            op.brightnessContrast((double) sliderB.getValue(), (double) sliderC.getValue());\n            // Label new image with update\n            newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n            // ImageMagick write newImage\n            op.addImage(newImage);\n            historyList.add(\"brightness: \" + sliderB.getValue() + \" contrast: \" + sliderC.getValue());\n            try {\n                cmd.run(op);\n            } catch (IOException | IM4JavaException | InterruptedException ex) {\n                throw new RuntimeException(ex);\n            }\n            // Update image path and reload image in JScrollPane\n            lastImage = imagePath;\n            imagePath = newImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            buttonLastImage.setEnabled(true);\n        } else if (e.getSource() == buttonResize | e.getSource() == toolsResize) {\n            try {\n                opCount++;\n                // resize popup\n                JTextField width = new JTextField(5);\n                JTextField height = new JTextField(5);\n                JPanel resizePanel = new JPanel();\n                resizePanel.setLayout(new GridLayout(2, 2));\n                resizePanel.add(new JLabel(\"Width: \"));\n                resizePanel.add(width);\n                resizePanel.add(new JLabel(\"Height: \"));\n                resizePanel.add(height);\n                JOptionPane.showConfirmDialog(null, resizePanel,\n                        \"Resize Dimensions\", JOptionPane.OK_CANCEL_OPTION);\n                // ImageMagick Call\n                ConvertCmd cmd = new ConvertCmd();\n                // create the operation, add images and operators/options\n                IMOperation op = new IMOperation();\n                op.addImage(imagePath);\n                op.resize(Integer.parseInt(width.getText()), Integer.parseInt(height.getText()));\n                newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n                op.addImage(newImage);\n                // execute the operation\n                cmd.run(op);\n                historyList.add(\"resize: \" + Integer.parseInt(width.getText()) + \"x\" + Integer.parseInt(height.getText()));\n                lastImage = imagePath;\n                imagePath = newImage;\n                File imgFile = new File(imagePath);\n                BufferedImage img;\n                try {\n                    img = ImageIO.read(imgFile);\n                } catch (IOException ex) {\n                    throw new RuntimeException(ex);\n                }\n                ImageIcon icon = new ImageIcon(img);\n                JLabel image = new JLabel(icon);\n                l_c.remove(imageScrollPane);\n                imageScrollPane = new JScrollPane(image);\n                l_c.add(imageScrollPane);\n                l_c.revalidate();\n                buttonLastImage.setEnabled(true);\n            } catch (InterruptedException | IOException | IM4JavaException except) {\n                except.printStackTrace();\n            }\n        } else if (e.getSource() == buttonMonochrome | e.getSource() == toolsMonochrome) {\n            opCount++;\n            // ImageMagick Call\n            ConvertCmd cmd = new ConvertCmd();\n            // create the operation, add images and operators/options\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            op.monochrome();\n            newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n            op.addImage(newImage);\n            // execute the operation\n            try {\n                cmd.run(op);\n            } catch (IOException | InterruptedException | IM4JavaException ex) {\n                throw new RuntimeException(ex);\n            }\n            historyList.add(\"monochrome\");\n            lastImage = imagePath;\n            imagePath = newImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            buttonLastImage.setEnabled(true);\n        } else if (e.getSource() == buttonInvert | e.getSource() == toolsInvert) {\n            opCount++;\n            // ImageMagick Call\n            ConvertCmd cmd = new ConvertCmd();\n            // create the operation, add images and operators/options\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            op.negate();\n            newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n            historyList.add(\"invert/negate\");\n            op.addImage(newImage);\n            // execute the operation\n            try {\n                cmd.run(op);\n            } catch (IOException | InterruptedException | IM4JavaException ex) {\n                throw new RuntimeException(ex);\n            }\n            lastImage = imagePath;\n            imagePath = newImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            buttonLastImage.setEnabled(true);\n        } else if (e.getSource() == buttonSC | e.getSource() == toolsSC) {\n            opCount++;\n            JTextField cc = new JTextField(5);\n            JTextField cf = new JTextField(5);\n            JPanel CSPanel = new JPanel();\n            CSPanel.setLayout(new GridLayout(2, 2));\n            CSPanel.add(new JLabel(\"Contrast Center(%): \"));\n            CSPanel.add(cc);\n            CSPanel.add(new JLabel(\"Contrast Factor: \"));\n            CSPanel.add(cf);\n            JOptionPane.showConfirmDialog(null, CSPanel,\n                    \"Sigmoidal Contrasting\", JOptionPane.OK_CANCEL_OPTION);\n            // ImageMagick Call\n            ConvertCmd cmd = new ConvertCmd();\n            // create the operation, add images and operators/options\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            op.sigmoidalContrast(Double.parseDouble(cc.getText()), Double.parseDouble(cf.getText()));\n            newImage = imagePath.replace(extension, \"_\" + opCount + extension);\n            historyList.add(\"sigmoidal contrast: center= \" + cc.getText() + \" factor= \" + cf.getText());\n            op.addImage(newImage);\n            // execute the operation\n            try {\n                cmd.run(op);\n            } catch (IOException | InterruptedException | IM4JavaException ex) {\n                throw new RuntimeException(ex);\n            }\n            lastImage = imagePath;\n            imagePath = newImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            buttonLastImage.setEnabled(true);\n        } else if (e.getSource() == exportHistory) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setDialogTitle(\"Specify a (.txt)file to save\");\n            int userSelection = fileChooser.showSaveDialog(null);\n            if (userSelection == JFileChooser.APPROVE_OPTION) {\n                PrintWriter output;\n                try {\n                    output = new PrintWriter(fileChooser.getSelectedFile());\n                    output.write(\"Order of Operations on Image \" + originalImage + \"\\n\");\n                    for (int i = 0; i < historyList.size(); i++) {\n                        output.write(i + 1 + \". \" + historyList.get(i) + \"\\n\");\n                    }\n                    output.close();\n                } catch (IOException ex) {\n                    throw new RuntimeException(ex);\n                }\n            }\n        } else if (e.getSource() == buttonLastImage) {\n            opCount--;\n            imagePath = lastImage;\n            File imgFile = new File(imagePath);\n            BufferedImage img;\n            try {\n                img = ImageIO.read(imgFile);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n            ImageIcon icon = new ImageIcon(img);\n            JLabel image = new JLabel(icon);\n            l_c.remove(imageScrollPane);\n            imageScrollPane = new JScrollPane(image);\n            l_c.add(imageScrollPane);\n            l_c.revalidate();\n            int lastItemIndex = historyList.size() - 1;\n            historyList.remove(lastItemIndex);\n            buttonLastImage.setEnabled(false);\n        }\n\n\n        // this is the file path for the user's chosen image\n        //originalImage\n\n        // each time\n        // variables for running the script\n        // edge thickness\n        // brightness\n        // contrast\n        // monochome\n        // invert\n        // resize\n        // sigmoidal contrasting\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UMGCWesternBlotEditor.java b/src/UMGCWesternBlotEditor.java
--- a/src/UMGCWesternBlotEditor.java	(revision 7dea12e1a25ca6cfa494cfe5f4693f3826b7efbe)
+++ b/src/UMGCWesternBlotEditor.java	(date 1665236907840)
@@ -204,8 +204,8 @@
 
         // create process
         ProcessBuilder pb = new ProcessBuilder();
-        // location of shell script to be executed
-        pb.directory(new File("/Users/pfspooter/Desktop/Shell_Test/pb_test/"));
+        // location of shell script to be executed within the project
+        pb.directory(new File("bash_script"));
         // commands to be run, first invoke the program to run, then the commands to be executed with any arguments
 
         /* can also build a list of commands
@@ -214,8 +214,8 @@
         commands.add("ls"); // command
         commands.add("-l"); // command
         */
-
-        pb.command("bash", "copy.sh");
+        // run the shell script in the repository
+        pb.command("bash", "bash_output.sh");
         // start process
         try {
             Process process = pb.start();
@@ -224,7 +224,7 @@
             if (exitVal == 0) {
                 System.out.println("\nSuccess");
             } else {
-                System.out.println("\nFail");
+                System.out.println("\nFailure: bash script did not run correctly");
             }
         }catch (IOException ex) {
             ex.printStackTrace();
Index: bash_script/bash_output
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bash_script/bash_output b/bash_script/bash_output
new file mode 100644
--- /dev/null	(date 1665236907815)
+++ b/bash_script/bash_output	(date 1665236907815)
@@ -0,0 +1,95 @@
+## most of this pulled from a response on Unix Stack Exchange
+## https://unix.stackexchange.com/questions/31414/how-can-i-pass-a-command-line-argument-into-a-shell-script
+## essentially just allows us to define however many variables we want
+## and then pass them as arguments to the appropriate spot in the script
+
+while getopts "a:b:c:d:e" opt
+do
+   case "$opt" in
+      a ) parameterA="$OPTARG" ;; # level adjustment, black_point
+      b ) parameterB="$OPTARG" ;; # level adjustment, white_point
+      c ) parameterC="$OPTARG" ;; # gamma adjustment, black_point
+      d ) parameterD="$OPTARG" ;; # gamma adjustment, white_point
+      e ) parameterE="$OPTARG" ;; # gamma adjustment, gamma
+      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
+   esac
+done
+
+## creation of bash output file
+
+exec &> >(tee execuatable_output.sh)
+
+## turn on debug stream
+set -x
+
+echo "## Script created on: $(date)" >> executable_output.sh
+
+magick testimage.png \
+	-canny 0x1+20%+30% -write testimage_canny.png \
+	-define connected-components:verbose=true \
+	-define connected-components:mean-color=true \
+	-connected-components 8 -auto-level -depth 8 verboseimage.png > testdata2.txt
+awk '{print $2}' testdata2.txt | awk 'NR>2' > verbosedata.txt
+sed s'/+.*//' verbosedata.txt > verbosedata_geometry.txt
+sed -r s'/.([0-9]+)?\x([0-9]+)?//' verbosedata.txt > verbosedata_resize.txt
+
+
+n=0;
+touch testdata_final.mvg
+while read line;do
+	n=$(($n+1))
+	filename=`echo test_"$n"`
+	filepng=`echo "$filename".png`
+	bounding_box=`echo "$line"`
+
+	magick -size 474x242 -depth 8 -extract $bounding_box \
+		testimage.png $filepng
+	echo "\(" "$filepng" >> filenames.txt
+
+	magick $filepng \
+	\( +clone -background none -fill red -stroke red -strokewidth 1 \
+		-hough-lines 9x9+30 -write "$filename"_line.png \) -composite "$filename"_hough.png
+	magick "$filename"_hough.png -hough-lines 9x9+30 "$filename"_hough.mvg
+	awk '{print $6}' "$filename"_hough.mvg >> testdata_final.mvg
+
+done < verbosedata.txt
+
+for a in $(cat verbosedata_geometry.txt);do
+    echo "-resize" "$a" "\) -geometry" >> test1.txt
+done
+
+for b in $(cat verbosedata_resize.txt);do
+	echo "$b" "-composite" "\\" >> test2.txt
+done
+
+
+paste filenames.txt test1.txt test2.txt > pleasework.txt
+sed '1 s/^/magick -size 474x242 xc:black \\\n/' pleasework.txt > pleasework2.sh
+echo "composite.png" >> pleasework2.sh
+chmod +x pleasework2.sh
+./pleasework2.sh
+
+#turn off stream
+set +x
+exec 19>&-
+
+## after running, parse the debugging script to reformat final output as shell script
+## because sed -i can cause portability options, I used 2 lines to make the changes
+## remove first instance of + on each line and space, then remove + again (echo lines)
+sed -e 's/^+ //g' -e 's/^++ //g' "execuatable_output.sh">"execuatable_output.new"
+mv -- "execuatable_output.new" "execuatable_output.sh"
+
+## remove first two lines of file
+sed 1,2d "execuatable_output.sh">"execuatable_output.new"
+mv -- "execuatable_output.new" "execuatable_output.sh"
+
+## escape out line if starts with "n=", "file", "bounding" (or "read line" and the 7 lines following)
+## can execute multiple sed arguments with -e (allows script to be built in many parts) between each find and replace phrase
+sed -e 's/^n=.*/## &/' -e 's/^file.*/## &/' -e 's/^bounding.*/## &/' "execuatable_output.sh">"execuatable_output.new"
+mv -- "execuatable_output.new" "execuatable_output.sh"
+
+## remove lines that start with "read" or "set"
+sed -e '/^read.*/d' -e '/^set.*/d' "execuatable_output.sh">"execuatable_output.new"
+mv -- "execuatable_output.new" "execuatable_output.sh"
+
+## should be able run execuatable_output.sh to recreate the original image manipulation
\ No newline at end of file
Index: .idea/runConfigurations/bash_script.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/bash_script.xml b/.idea/runConfigurations/bash_script.xml
new file mode 100644
--- /dev/null	(date 1665234660870)
+++ b/.idea/runConfigurations/bash_script.xml	(date 1665234660870)
@@ -0,0 +1,17 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="bash-script" type="ShConfigurationType">
+    <option name="SCRIPT_TEXT" value="" />
+    <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
+    <option name="SCRIPT_PATH" value="$PROJECT_DIR$/../../BIOT670_CAPSTONE/bash4GUI.sh" />
+    <option name="SCRIPT_OPTIONS" value="" />
+    <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
+    <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+    <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
+    <option name="INTERPRETER_PATH" value="/bin/bash" />
+    <option name="INTERPRETER_OPTIONS" value="" />
+    <option name="EXECUTE_IN_TERMINAL" value="true" />
+    <option name="EXECUTE_SCRIPT_FILE" value="true" />
+    <envs />
+    <method v="2" />
+  </configuration>
+</component>
\ No newline at end of file
